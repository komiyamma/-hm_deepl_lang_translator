// HmDeepLLangTranslator.mac v1.2.0.1
// Copyright (c) 2023 Akitsugu Komiyama
// under the MIT License

jsmode "WebView2";
js {
    // 環境変数から、DeepL Apps Script の翻訳APIへのURLアドレスを取得。
    // ご自身で環境変数「DEEPL_SCRIPT_TRANSLATION」にDeepLのAPIのAUTH_KEYを設定してください。
    let auth_key = getenv("DEEPL_SCRIPT_TRANSLATION");

    // 環境変数への登録が面倒、あるいは避けたいという場合は、下部へと直接認証キーの文字列を貼り付けること。
    // auth_key = "*******-****-****-****-************:**";

    // 翻訳対象のテキスト
    let text = hidemaru.getSelectedText() || hidemaru.getTotalText();

    // 有料版の人は https://api.deepl.com/v2/translate と書き換えると無料の制限が無くなる
    let endpoint_url = "https://api-free.deepl.com/v2/translate";

    let params = new URLSearchParams();
    params.append("auth_key", auth_key);
    params.append("text", text);
    params.append("source_lang", getarg(0));
    params.append("target_lang", getarg(1));

    // 最後の表示用。出力の場所ややり方変えたければ、この関数を編集のこと。
    var translate_text = "";

    // マクロ実行から翻訳結果が返ってくるまでの間に時間的なずれがあり、その間編集ペインはフリーであるため、選択中だったかを記憶しておく
    // これにより翻訳マクロを実行した直後、まだ翻訳結果が返っていていないのにカーソルを動作させても良い形となり、ストレスがかなり軽減できる
    var is_last_selecting = selecting();

    function print_translate_text() {
        begingroupundo();
        if (is_last_selecting) {
            escapeselect();
            moveto(selendx(), selendy()); // 選択してたら解除しつつも選択範囲の最後尾に。解除してからでも最後の選択位置を元にするから大丈夫。
            if (column() != 0) {          // 移動した結果、カラム位置が「行の先頭」でないなら１つ改行入れて行の先頭へ
                insertreturn();
            }
        } else {
            gofileend(); // 最後尾に
        }

        insert(translate_text);
        translate_text = "HmDeepLTranslateResponseTextComplete";
        endgroupundo();
    }

    function fetch_translate_text() {
        try {

            // リクエストを送信
            fetch(endpoint_url + "?" + params)
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    } else {
                        throw new Error("通信エラー");
                    }
                })
                .then(response_json => {
                    // オブジェクトとして var 変数に代入。非同期と同期の両方で利用するので var になっている
                    translate_text = response_json["translations"][0]["text"];
                    if (!hidemaru.isMacroExecuting()) {
                        // 最終処理
                        hidemaru.postExecMacroMemory("js{ print_translate_text(); }");
                    } else {
                        outputpane_log("他のマクロ実行中であるため、相互マクロ干渉を回避し、アウトプット枠に出力します:");
                        outputpane_log(translate_text);
                    }
                })
                .catch(error => {
                    outputpane_log(error);
                });

        } catch (e) {
            outputpane_log("通信エラー:");
        }
    }

    fetch_translate_text();

    // エラーなどをアプトプット枠に表示する用途
    function outputpane_log(msg) {
        let dll = loaddll("HmOutputPane.dll");
        dll.dllfuncw.OutputW(hidemaru.getCurrentWindowHandle(), msg + "\r\n");
    }
}
