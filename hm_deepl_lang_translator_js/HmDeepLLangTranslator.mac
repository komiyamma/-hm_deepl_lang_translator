// HmDeepLLangTranslator.mac v1.2.0.1
// Copyright (c) 2023 Akitsugu Komiyama
// under the MIT License

jsmode "WebView2";
js {

    // 環境変数から、DeepL Apps Script の翻訳APIへのURLアドレスを取得。
    // ご自身で環境変数「DEEPL_SCRIPT_TRANSLATION」にDeepLのAPIのAUTH_KEYを設定してください。
    let auth_key = getenv("DEEPL_SCRIPT_TRANSLATION");

    // 環境変数への登録が面倒、あるいは避けたいという場合は、下部へと直接認証キーの文字列を貼り付けること。
    // auth_key = "*******-****-****-****-************:**";

    // 翻訳対象のテキスト
    let text = hidemaru.getSelectedText() || hidemaru.getTotalText();

    // 有料版の人は https://api.deepl.com/v2/translate と書き換えると無料の制限が無くなる
    let script_url = "https://api-free.deepl.com/v2/translate";

    let data = new URLSearchParams();
    data.append("auth_key", auth_key);
    data.append("text", text);
    data.append("source_lang", getarg(0));
    data.append("target_lang", getarg(1));

    // マクロ実行から翻訳結果が返ってくるまでの間に時間的なずれがあり、その間編集ペインはフリーであるため、選択中だったかを記憶しておく
    // これにより翻訳マクロを実行した直後、まだ翻訳結果が返っていていないのにカーソルを動作させても良い形となり、ストレスがかなり軽減できる
    let [is_last_selecting, selx, sely] = [selecting(), selendx(), selendy()];

    // 最後の表示用。出力の場所ややり方変えたければ、この関数を編集のこと。
    var translate_text = "";
    function printTranslateText() {
        try {
            // エラーが出る可能性があるため、先頭でローカルに代入してみる
            let text = translate_text["translations"][0]["text"];

	        begingroupundo();
	        if (is_last_selecting) {
	            escapeselect();
	            moveto(selx, sely); // 選択してたら解除しつつも選択範囲の最後尾に。解除してからでも最後の選択位置を元にするから大丈夫。
	        } else {
	            gofileend(); // 最後尾に
	        }

	        if (column() != 0) { // 移動した結果、カラム位置が「行の先頭」でないなら１つ改行入れて行の先頭へ
	            insertreturn();
	        }

	        insert(text);
	        endgroupundo();

        } catch(e) {

            writeLineOutputPane("翻訳エラー:");
        } finally {
	        translate_text = "HmDeepLTranslateResponseTextComplete";
        }
    }

    // 非同期内でのスリープ関数用途
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    function requestTranslate() {
        try {
            let xmlHttpRequest = new XMLHttpRequest();

            // 返信状況進行用
            xmlHttpRequest.onreadystatechange = async function() {

                let READYSTATE_COMPLETED = 4;
                let HTTP_STATUS_OK = 200;

                // うまくいって完了したっぽい
                if (this.readyState == READYSTATE_COMPLETED && this.status == HTTP_STATUS_OK) {
                    try {
                        translate_text = JSON.parse(this.responseText);
                        // マクロ実行中かもしれないので、5回トライする
                        for (let i = 0; i < 5; i++) {
                            // 最後の表示処理が済んでるならば終わり
                            if (translate_text == "HmDeepLTranslateResponseTextComplete") {
                                return;
                            }

                            // マクロ実行中ならばちょっとまつ、
                            if (hidemaru.isMacroExecuting()) {
                                await sleep(500);
                                continue;
                            }

                            // 最終処理。これを実行できたら 続きはしない
                            hidemaru.postExecMacroMemory("js{ printTranslateText(); }");
                            return;
                        }
                        writeLineOutputPane("他のマクロ実行中が継続したため、翻訳を出力できませんでした。");
                    } catch (e) {
                        writeLineOutputPane("翻訳エラー:");
                    }
                } else if (this.readyState == READYSTATE_COMPLETED && this.status != HTTP_STATUS_OK) {
                    writeLineOutputPane("通信エラー:" + this.status);
                }
            }

            // よくわからんエラー用
            xmlHttpRequest.onerror = function () {
                writeLineOutputPane("不明なエラー:");
            }

            // 中断用
            xmlHttpRequest.onabort = function () {
                writeLineOutputPane("翻訳の中断");
            }

            // GETは長文だと何が起きるかわからんのでPOSTで
            xmlHttpRequest.open('POST', script_url);

            // サーバに対して解析方法を指定する
            xmlHttpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

            // データをリクエスト ボディに含めて送信する
            xmlHttpRequest.send(String(data));

        } catch(e) {
            writeLineOutputPane("通信エラー:");
        }
    }

    requestTranslate();

    // エラーなどをアプトプット枠に表示する用途
    function writeLineOutputPane(msg) {
        let dll = loaddll("HmOutputPane.dll");
        dll.dllfuncw.OutputW(hidemaru.getCurrentWindowHandle(), msg + "\r\n");
    }
}